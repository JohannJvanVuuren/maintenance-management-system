/* Import of axios client to make API calls to the backend of the application */
import axios from "axios";

/* Import of the React hooks used in this component */
import {useEffect, useState} from "react";

/* Import of main stylesheet generated by SCSS and preprocessor */
import '../scss/main.css';
/* Import of React-Bootstrap styled component */
import Table from "react-bootstrap/Table";

export const UpdateStatusMultipleJobs = () => {
    /* Declaration and initialisation of the state variable needed in this component */
    const [jobs, setJobs] = useState([]);
    const [statusUpdate, setStatusUpdate] = useState([]);

    /* A useEffect hook to run the axios call to the backend to retrieve the required information from
    * the database */
    useEffect(() => {

        /* Setup of configuration of the axios call */
        const url = 'http://localhost:8000/getJobListByStatus';

        /* axios call to the .../getJobListByStatus endpoint to get the information that needs to be displayed
        * in this component */
        axios.get(url)
            .then(response => {
                setJobs(response.data);
            })
            .catch(error => {
                console.log('Error', error.message);
            })
    }, []); //No dependencies, so the hook will only run once when the page is rendered

    const statusChangeBulkHandler = (event) => {

        /* Setting up of the axios argument and the status variable that will be sent in the body of the
        patch request */
        const url = 'http://localhost:8000/bulkStatusChange';
        const config = {
            jobs: statusUpdate
        }

        /* The axios call to the backend with the above arguments */
        axios.patch(url, config)
            .then(response => {
                console.log(response.data);
            })
            .catch(error => {
                console.log(error);
            })
    }

    return (
        <div>
            <h1 className={'section-titles'}>Status updates (multiple)</h1>
            {/* Rendering of a React-bootstrap table suited for this purpose */}
            <Table
                striped bordered hover variant="dark"
                responsive
                className={'mt-5 table'}
            >
                <thead>
                <tr className={'table-header'}>
                    <th className={'h3'}>Unique Ref. No.</th>
                    <th className={'h3'}>Date</th>
                    <th className={'h3'}>Description</th>
                    <th className={'h3'}>Location</th>
                    <th className={'h3'}>Priority</th>
                    <th className={'h3'}>Status</th>
                </tr>
                </thead>
                <tbody>
                {/* The data is received back as an array of objects. So the Array.map method is used to map loop
                 through the array and display the data of the individual job objects */}
                {jobs.map((job, index) => {
                    /* Only displaying non-archived items */
                    if (job.__v === 0) {
                        return (
                            <tr key={index} className={'table-row'}>
                                <td className={'h5'}>{job._id}</td>
                                <td className={'h5'}>{(job.date).slice(0, 10)}</td>
                                <td className={'h5'}>{job.description}</td>
                                <td className={'h5'}>{job.location}</td>
                                <td className={'h5'}>{job.priority}</td>
                                <td className={'h5'}>
                                    <select
                                        name={'status'}
                                        /* Creating an array of jobs where the status needs to be updated */
                                        onChange={(event) => {
                                            setStatusUpdate([
                                                ...statusUpdate,
                                                {
                                                    ...job,
                                                    status: event.target.value
                                                }
                                            ])
                                        }}>
                                        <option>{job.status}</option>
                                        <option value={'In progress'}>In progress</option>
                                        <option value={'Completed'}>Completed</option>
                                        <option value={'Submitted'}>Submitted</option>
                                    </select>
                                </td>
                            </tr>
                        )
                    } else {
                        return (
                            <tr>
                                <td colSpan={7}></td>
                            </tr>
                        )
                    }
                })}
                <tr>
                    <td colSpan={6}>No records to display</td>
                </tr>
                <tr>
                    {/* This code merely makes an additional row with blank cells except for the last cell which
                     contains the bulk update button*/}
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td>
                        <button
                            className={'btn-update'}
                            onClick={statusChangeBulkHandler}
                        >
                            Bulk Update
                        </button>
                    </td>
                </tr>
                </tbody>
            </Table>
        </div>
    )
}